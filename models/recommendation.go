// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Recommendation recommendation
//
// swagger:model Recommendation
type Recommendation struct {

	// ID of the recommendation.
	// Example: prod_123
	// Required: true
	ID *string `json:"id"`

	// Image URL of the recommendation.
	// Example: prod_abc.test.com
	// Required: true
	ImageURL *string `json:"image_url"`

	// Name of the recommendation.
	// Example: Product ABC
	// Required: true
	ProductName *string `json:"product_name"`

	// Product URL of the recommendation.
	// Example: prod_abc.test.com
	// Required: true
	ProductURL *string `json:"product_url"`
}

// Validate validates this recommendation
func (m *Recommendation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recommendation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Recommendation) validateImageURL(formats strfmt.Registry) error {

	if err := validate.Required("image_url", "body", m.ImageURL); err != nil {
		return err
	}

	return nil
}

func (m *Recommendation) validateProductName(formats strfmt.Registry) error {

	if err := validate.Required("product_name", "body", m.ProductName); err != nil {
		return err
	}

	return nil
}

func (m *Recommendation) validateProductURL(formats strfmt.Registry) error {

	if err := validate.Required("product_url", "body", m.ProductURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this recommendation based on context it is used
func (m *Recommendation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Recommendation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Recommendation) UnmarshalBinary(b []byte) error {
	var res Recommendation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
