// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/Dataiads/einstein-golang-sdk/models"
)

// SendAddToCartReader is a Reader for the SendAddToCart structure.
type SendAddToCartReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendAddToCartReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSendAddToCartOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSendAddToCartBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSendAddToCartOK creates a SendAddToCartOK with default headers values
func NewSendAddToCartOK() *SendAddToCartOK {
	return &SendAddToCartOK{}
}

/* SendAddToCartOK describes a response with status code 200, with default header values.

A successful response contains a UUID for the given user.
*/
type SendAddToCartOK struct {
	Payload *models.ActivityResponse
}

func (o *SendAddToCartOK) Error() string {
	return fmt.Sprintf("[POST /activities/{siteId}/addToCart][%d] sendAddToCartOK  %+v", 200, o.Payload)
}
func (o *SendAddToCartOK) GetPayload() *models.ActivityResponse {
	return o.Payload
}

func (o *SendAddToCartOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ActivityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendAddToCartBadRequest creates a SendAddToCartBadRequest with default headers values
func NewSendAddToCartBadRequest() *SendAddToCartBadRequest {
	return &SendAddToCartBadRequest{}
}

/* SendAddToCartBadRequest describes a response with status code 400, with default header values.

A validation error response contains an array of invalid parameters.
*/
type SendAddToCartBadRequest struct {
	Payload *models.Error
}

func (o *SendAddToCartBadRequest) Error() string {
	return fmt.Sprintf("[POST /activities/{siteId}/addToCart][%d] sendAddToCartBadRequest  %+v", 400, o.Payload)
}
func (o *SendAddToCartBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SendAddToCartBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SendAddToCartBody send add to cart body
swagger:model SendAddToCartBody
*/
type SendAddToCartBody struct {

	// client Ip
	ClientIP models.ClientIPParam `json:"clientIp,omitempty"`

	// client user agent
	ClientUserAgent models.ClientUserAgentParam `json:"clientUserAgent,omitempty"`

	// cookie Id
	CookieID models.CookieIDParam `json:"cookieId,omitempty"`

	// Array of products the user has added to their cart.
	// Required: true
	Products []*SendAddToCartParamsBodyProductsItems0 `json:"products"`

	// realm
	Realm models.RealmParam `json:"realm,omitempty"`

	// user Id
	UserID models.UserIDParam `json:"userId,omitempty"`
}

// Validate validates this send add to cart body
func (o *SendAddToCartBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientUserAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCookieID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRealm(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendAddToCartBody) validateClientIP(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientIP) { // not required
		return nil
	}

	if err := o.ClientIP.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "clientIp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "clientIp")
		}
		return err
	}

	return nil
}

func (o *SendAddToCartBody) validateClientUserAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientUserAgent) { // not required
		return nil
	}

	if err := o.ClientUserAgent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "clientUserAgent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "clientUserAgent")
		}
		return err
	}

	return nil
}

func (o *SendAddToCartBody) validateCookieID(formats strfmt.Registry) error {
	if swag.IsZero(o.CookieID) { // not required
		return nil
	}

	if err := o.CookieID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "cookieId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "cookieId")
		}
		return err
	}

	return nil
}

func (o *SendAddToCartBody) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"products", "body", o.Products); err != nil {
		return err
	}

	for i := 0; i < len(o.Products); i++ {
		if swag.IsZero(o.Products[i]) { // not required
			continue
		}

		if o.Products[i] != nil {
			if err := o.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SendAddToCartBody) validateRealm(formats strfmt.Registry) error {
	if swag.IsZero(o.Realm) { // not required
		return nil
	}

	if err := o.Realm.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "realm")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "realm")
		}
		return err
	}

	return nil
}

func (o *SendAddToCartBody) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(o.UserID) { // not required
		return nil
	}

	if err := o.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "userId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "userId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this send add to cart body based on the context it is used
func (o *SendAddToCartBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClientIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientUserAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCookieID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRealm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendAddToCartBody) contextValidateClientIP(ctx context.Context, formats strfmt.Registry) error {

	if err := o.ClientIP.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "clientIp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "clientIp")
		}
		return err
	}

	return nil
}

func (o *SendAddToCartBody) contextValidateClientUserAgent(ctx context.Context, formats strfmt.Registry) error {

	if err := o.ClientUserAgent.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "clientUserAgent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "clientUserAgent")
		}
		return err
	}

	return nil
}

func (o *SendAddToCartBody) contextValidateCookieID(ctx context.Context, formats strfmt.Registry) error {

	if err := o.CookieID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "cookieId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "cookieId")
		}
		return err
	}

	return nil
}

func (o *SendAddToCartBody) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Products); i++ {

		if o.Products[i] != nil {
			if err := o.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SendAddToCartBody) contextValidateRealm(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Realm.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "realm")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "realm")
		}
		return err
	}

	return nil
}

func (o *SendAddToCartBody) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	if err := o.UserID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "userId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "userId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SendAddToCartBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendAddToCartBody) UnmarshalBinary(b []byte) error {
	var res SendAddToCartBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SendAddToCartParamsBodyProductsItems0 send add to cart params body products items0
swagger:model SendAddToCartParamsBodyProductsItems0
*/
type SendAddToCartParamsBodyProductsItems0 struct {

	// A unique identifier for the given product.
	// Required: true
	ID *string `json:"id"`

	// Price of each individual unit of this product.
	// Required: true
	Price *float64 `json:"price"`

	// The total number of this item in the cart.
	// Required: true
	Quantity *int64 `json:"quantity"`

	// A unique identifier for a sellable unit of the given product, when applicable.
	// Required: true
	Sku *string `json:"sku"`
}

// Validate validates this send add to cart params body products items0
func (o *SendAddToCartParamsBodyProductsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendAddToCartParamsBodyProductsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *SendAddToCartParamsBodyProductsItems0) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", o.Price); err != nil {
		return err
	}

	return nil
}

func (o *SendAddToCartParamsBodyProductsItems0) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", o.Quantity); err != nil {
		return err
	}

	return nil
}

func (o *SendAddToCartParamsBodyProductsItems0) validateSku(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", o.Sku); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this send add to cart params body products items0 based on context it is used
func (o *SendAddToCartParamsBodyProductsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SendAddToCartParamsBodyProductsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendAddToCartParamsBodyProductsItems0) UnmarshalBinary(b []byte) error {
	var res SendAddToCartParamsBodyProductsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
