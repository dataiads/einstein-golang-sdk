// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"einstein/models"
)

// GetZoneRecommendationsReader is a Reader for the GetZoneRecommendations structure.
type GetZoneRecommendationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetZoneRecommendationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetZoneRecommendationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetZoneRecommendationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetZoneRecommendationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetZoneRecommendationsOK creates a GetZoneRecommendationsOK with default headers values
func NewGetZoneRecommendationsOK() *GetZoneRecommendationsOK {
	return &GetZoneRecommendationsOK{}
}

/* GetZoneRecommendationsOK describes a response with status code 200, with default header values.

A successful response will contain a set of recommendations.
*/
type GetZoneRecommendationsOK struct {
	Payload *models.ZoneResponse
}

func (o *GetZoneRecommendationsOK) Error() string {
	return fmt.Sprintf("[POST /personalization/{siteId}/zones/{zoneName}/recs][%d] getZoneRecommendationsOK  %+v", 200, o.Payload)
}
func (o *GetZoneRecommendationsOK) GetPayload() *models.ZoneResponse {
	return o.Payload
}

func (o *GetZoneRecommendationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZoneResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetZoneRecommendationsBadRequest creates a GetZoneRecommendationsBadRequest with default headers values
func NewGetZoneRecommendationsBadRequest() *GetZoneRecommendationsBadRequest {
	return &GetZoneRecommendationsBadRequest{}
}

/* GetZoneRecommendationsBadRequest describes a response with status code 400, with default header values.

A request parameter was missing or invalid.
*/
type GetZoneRecommendationsBadRequest struct {
	Payload *models.Error
}

func (o *GetZoneRecommendationsBadRequest) Error() string {
	return fmt.Sprintf("[POST /personalization/{siteId}/zones/{zoneName}/recs][%d] getZoneRecommendationsBadRequest  %+v", 400, o.Payload)
}
func (o *GetZoneRecommendationsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetZoneRecommendationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetZoneRecommendationsNotFound creates a GetZoneRecommendationsNotFound with default headers values
func NewGetZoneRecommendationsNotFound() *GetZoneRecommendationsNotFound {
	return &GetZoneRecommendationsNotFound{}
}

/* GetZoneRecommendationsNotFound describes a response with status code 404, with default header values.

Either the given `recommenderName` or `siteId` was invalid.
*/
type GetZoneRecommendationsNotFound struct {
	Payload *models.Error
}

func (o *GetZoneRecommendationsNotFound) Error() string {
	return fmt.Sprintf("[POST /personalization/{siteId}/zones/{zoneName}/recs][%d] getZoneRecommendationsNotFound  %+v", 404, o.Payload)
}
func (o *GetZoneRecommendationsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetZoneRecommendationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetZoneRecommendationsBody get zone recommendations body
swagger:model GetZoneRecommendationsBody
*/
type GetZoneRecommendationsBody struct {

	// Product categories to use as context for generating recommendations. Any given request must have only one of categories or products.
	Categories []*GetZoneRecommendationsParamsBodyCategoriesItems0 `json:"categories"`

	// client Ip
	ClientIP models.ClientIPParam `json:"clientIp,omitempty"`

	// client user agent
	ClientUserAgent models.ClientUserAgentParam `json:"clientUserAgent,omitempty"`

	// cookie Id
	CookieID models.CookieIDParam `json:"cookieId,omitempty"`

	// Products to use as context for generating recommendations. Any given request must have only one of categories or products.
	Products []models.ProductForView `json:"products"`

	// realm
	// Required: true
	Realm *models.RealmParam `json:"realm"`

	// rules
	Rules models.Rules `json:"rules"`

	// user Id
	UserID models.UserIDParam `json:"userId,omitempty"`
}

// Validate validates this get zone recommendations body
func (o *GetZoneRecommendationsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientUserAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCookieID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRealm(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetZoneRecommendationsBody) validateCategories(formats strfmt.Registry) error {
	if swag.IsZero(o.Categories) { // not required
		return nil
	}

	for i := 0; i < len(o.Categories); i++ {
		if swag.IsZero(o.Categories[i]) { // not required
			continue
		}

		if o.Categories[i] != nil {
			if err := o.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "categories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetZoneRecommendationsBody) validateClientIP(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientIP) { // not required
		return nil
	}

	if err := o.ClientIP.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "clientIp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "clientIp")
		}
		return err
	}

	return nil
}

func (o *GetZoneRecommendationsBody) validateClientUserAgent(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientUserAgent) { // not required
		return nil
	}

	if err := o.ClientUserAgent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "clientUserAgent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "clientUserAgent")
		}
		return err
	}

	return nil
}

func (o *GetZoneRecommendationsBody) validateCookieID(formats strfmt.Registry) error {
	if swag.IsZero(o.CookieID) { // not required
		return nil
	}

	if err := o.CookieID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "cookieId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "cookieId")
		}
		return err
	}

	return nil
}

func (o *GetZoneRecommendationsBody) validateRealm(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"realm", "body", o.Realm); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"realm", "body", o.Realm); err != nil {
		return err
	}

	if o.Realm != nil {
		if err := o.Realm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "realm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "realm")
			}
			return err
		}
	}

	return nil
}

func (o *GetZoneRecommendationsBody) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	if err := o.Rules.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "rules")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "rules")
		}
		return err
	}

	return nil
}

func (o *GetZoneRecommendationsBody) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(o.UserID) { // not required
		return nil
	}

	if err := o.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "userId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "userId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get zone recommendations body based on the context it is used
func (o *GetZoneRecommendationsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCategories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClientUserAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCookieID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRealm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetZoneRecommendationsBody) contextValidateCategories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Categories); i++ {

		if o.Categories[i] != nil {
			if err := o.Categories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "categories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetZoneRecommendationsBody) contextValidateClientIP(ctx context.Context, formats strfmt.Registry) error {

	if err := o.ClientIP.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "clientIp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "clientIp")
		}
		return err
	}

	return nil
}

func (o *GetZoneRecommendationsBody) contextValidateClientUserAgent(ctx context.Context, formats strfmt.Registry) error {

	if err := o.ClientUserAgent.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "clientUserAgent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "clientUserAgent")
		}
		return err
	}

	return nil
}

func (o *GetZoneRecommendationsBody) contextValidateCookieID(ctx context.Context, formats strfmt.Registry) error {

	if err := o.CookieID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "cookieId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "cookieId")
		}
		return err
	}

	return nil
}

func (o *GetZoneRecommendationsBody) contextValidateRealm(ctx context.Context, formats strfmt.Registry) error {

	if o.Realm != nil {
		if err := o.Realm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "realm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "realm")
			}
			return err
		}
	}

	return nil
}

func (o *GetZoneRecommendationsBody) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Rules.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "rules")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "rules")
		}
		return err
	}

	return nil
}

func (o *GetZoneRecommendationsBody) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	if err := o.UserID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "userId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "userId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetZoneRecommendationsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetZoneRecommendationsBody) UnmarshalBinary(b []byte) error {
	var res GetZoneRecommendationsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetZoneRecommendationsParamsBodyCategoriesItems0 get zone recommendations params body categories items0
swagger:model GetZoneRecommendationsParamsBodyCategoriesItems0
*/
type GetZoneRecommendationsParamsBodyCategoriesItems0 struct {

	// A unique identifier for the given category.
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this get zone recommendations params body categories items0
func (o *GetZoneRecommendationsParamsBodyCategoriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetZoneRecommendationsParamsBodyCategoriesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get zone recommendations params body categories items0 based on context it is used
func (o *GetZoneRecommendationsParamsBodyCategoriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetZoneRecommendationsParamsBodyCategoriesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetZoneRecommendationsParamsBodyCategoriesItems0) UnmarshalBinary(b []byte) error {
	var res GetZoneRecommendationsParamsBodyCategoriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
